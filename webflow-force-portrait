<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Force Portrait</title>
</head>

<body>

  <main>

    <canvas id="webgl"></canvas>

  </main>

  <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.149.0/build/three.module.js",
        "three/addons/": "https://unpkg.com/three@0.149.0/examples/jsm/"
      }
    }
  </script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <script src="https://code.createjs.com/1.0.0/tweenjs.min.js"></script>

  <script type="module">
    import * as THREE from "three";
    import { EffectComposer } from "three/addons/postprocessing/EffectComposer.js";
    import { UnrealBloomPass } from "three/addons/postprocessing/UnrealBloomPass.js";
    import { RenderPass } from "three/addons/postprocessing/RenderPass.js";
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { GUI } from "three/addons/libs/lil-gui.module.min.js";


    let cameraPosition = new THREE.Vector3(0, 0, 8);

    const params = {
      threshold: 0,
      strength: 1,
      radius: 0
    };

    const sizes = {
      width: window.innerWidth,
      height: window.innerHeight
    }

    function initScene() {
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const canvas = document.getElementById("webgl")
      const renderer = new THREE.WebGLRenderer({ canvas: canvas });
      renderer.setClearAlpha(0);

      camera.position.copy(cameraPosition); // Set initial camera position
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);


      const controls = new OrbitControls(camera, renderer.domElement);
      controls.update();
      controls.enableDamping = false;
      controls.enablePan = false;
      controls.enableZoom = false;

      return { scene, camera, renderer, controls };
    }

    function createLine() {
      const material = new THREE.LineBasicMaterial({ color: "rgba(224, 114, 45, 1)" });
      const line = new THREE.Line(new THREE.BufferGeometry(), material);
      return line;
    }

    function createArrow() {
      const arrowGeometry = new THREE.SphereGeometry(0.05, 32, 16);
      const arrowMaterial = new THREE.MeshBasicMaterial({ color: "rgba(238, 160, 68, 1)" });
      const arrow = new THREE.Mesh(arrowGeometry, arrowMaterial);
      arrow.position.set(0, 0, 0);
      return arrow;
    }

    function addAxesHelper(scene) {
      const axesHelper = new THREE.AxesHelper(5);
      

      return axesHelper
    }
    function handleWindowResize(camera, renderer) {
      window.addEventListener('resize', function () {
        sizes.width = window.innerWidth;
        sizes.height = window.innerHeight;

        camera.aspect = sizes.width / sizes.height;
        camera.updateProjectionMatrix();

        renderer.setSize(sizes.width, sizes.height);
      });
    }

    function setupBloomComposer(scene, camera) {
      const bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        0.238,
        1.4,
        1
      );

      bloomPass.threshold = params.threshold;
      bloomPass.strength = params.strength;
      bloomPass.radius = params.radius;

      const gui = new GUI();
      const bloomFolder = gui.addFolder("bloom");

      bloomFolder.add(params, "threshold", 0.0, 1.0).onChange(value => {
        bloomPass.threshold = Number(value);
      });

      bloomFolder.add(params, "strength", 0.0, 3.0).onChange(value => {
        bloomPass.strength = Number(value);
      });

      gui
        .add(params, "radius", 0.0, 1.0)
        .step(0.01)
        .onChange(value => {
          bloomPass.radius = Number(value);
        });

      const renderPass = new RenderPass(scene, camera);
      const composer = new EffectComposer(renderer);
      composer.addPass(renderPass);
      composer.addPass(bloomPass);

      return composer;
    }

    function startAnimation(validVectors, line, arrow, controls, composer) {
      const tension = 0;
      const curve = new THREE.CatmullRomCurve3(validVectors, undefined, tension);
      const animationDuration = 20;
      const animationSteps = 1000 * 5;
      const animationStepDuration = animationDuration / animationSteps;
      let currentStep = 0;
      const clock = new THREE.Clock()
      let previousTime = 0

      function animate() {
        requestAnimationFrame(animate);

        if (currentStep < animationSteps) {
          const t = currentStep / animationSteps;
          const endIndex = Math.min(Math.floor(t * validVectors.length), validVectors.length - 1);
          const curvePoints = validVectors.slice(0, endIndex + 1);

          line.geometry.setFromPoints(curvePoints);

          const arrowPosition = new THREE.Vector3();
          const positionAttribute = line.geometry.attributes.position;
          arrowPosition.fromBufferAttribute(positionAttribute, positionAttribute.count - 1);
          arrow.position.copy(arrowPosition);

          const direction = arrowPosition.clone().sub(new THREE.Vector3(0, 0, 0)).normalize();
          arrow.rotation.setFromRotationMatrix(new THREE.Matrix4().lookAt(new THREE.Vector3(0, 0, 0), direction, new THREE.Vector3(0, 1, 0)));

          currentStep++;
        }

        const elapsedTime = clock.getElapsedTime()
        const deltaTime = elapsedTime - previousTime
        previousTime = elapsedTime


        controls.update();
        composer.render();
      }

      animate();
    }

    const { scene, camera, renderer, controls } = initScene();
    const line = createLine();
    const arrow = createArrow();
    const axesHelper = addAxesHelper();
    
    

    scene.add(line);
    scene.add(arrow);
    scene.add(axesHelper);
    
    handleWindowResize(camera, renderer);

    const composer = setupBloomComposer(scene, camera);

    Papa.parse("https://shanepatrickroach.github.io/force-portrait-csv-files/shane.csv", {
      download: true,
      header: true,
      dynamicTyping: true,
      complete: function (results) {
        const data = results.data;


        console.log(console.log(data.length))
        if (data.length === 0) {
          console.error("CSV data is empty or not successfully parsed.");
          return;
        }

        const validVectors = data
          .map(point => {
            if (point.x !== undefined && point.y !== undefined && point.z !== undefined) {
              const rotatedVector = new THREE.Vector3(-point.y, point.x, point.z);
              return rotatedVector;
            }
            return null;
          })
          .filter(vector => vector !== null);

        if (validVectors.length === 0) {
          console.error("No valid vectors found. Check your CSV data for missing values.");
          return;
        }

        // Add buttons after CSV data is loaded
        startAnimation(validVectors, line, arrow, controls, composer);
      }

    });


  </script>

</body>

</html>
